     1                                  ;Se da un fisier text. Sa se citeasca continutul fisierului, sa se contorizeze numarul de consoane si sa se afiseze aceasta valoare. Numele fisierului text este definit in segmentul de date.
     2                                  bits 32
     3                                  global start
     4                                  
     5                                  extern exit, printf, fread, fopen, fclose, fscanf
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import fread msvcrt.dll
     9                                  import fopen msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fscanf msvcrt.dll
    12                                  
    13                                  segment data use32
    14 00000000 696E707574322E7478-         file_name db 'input2.txt', 0
    14 00000009 7400               
    15 0000000B 7200                        file_access_mode db 'r', 0
    16 0000000D FFFFFFFF                    file_descriptor dd -1
    17 00000011 00000000                    characters_read dd 0
    18                                      buffer_len equ 100
    19 00000015 <res 00000065>              buffer resb buffer_len+1
    20                                      
    21 0000007A 00000000                    number_of_consonants dd 0
    22 0000007E 256400                      format db '%d', 0
    23 00000081 256300                      format_c db '%c', 0
    24                                  
    25                                  segment code use32
    26                                  start:
    27                                      ; open file
    28 00000000 68[0B000000]                push dword file_access_mode
    29 00000005 68[00000000]                push dword file_name
    30 0000000A FF15[00000000]              call [fopen]
    31 00000010 83C408                      add esp, 8
    32 00000013 A3[0D000000]                mov [file_descriptor], eax
    33                                      
    34                                      ; check if it exists
    35 00000018 83F800                      cmp eax, 0
    36 0000001B 0F84A0000000                je final
    37                                      
    38                                      ; read buffer
    39                                      read_loop:
    40 00000021 FF35[0D000000]                  push dword [file_descriptor]
    41 00000027 6A64                            push dword buffer_len
    42 00000029 6A01                            push dword 1
    43 0000002B 68[15000000]                    push dword buffer
    44 00000030 FF15[00000000]                  call [fread]
    45 00000036 83C410                          add esp, 16
    46 00000039 83F800                          cmp eax, 0 ; end of file
    47 0000003C 7460                            je close_file
    48 0000003E A3[11000000]                    mov [characters_read], eax
    49                                          
    50                                          ; loop through string
    51 00000043 8B0D[11000000]                  mov ecx, [characters_read]
    52 00000049 BE00000000                      mov esi, 0
    53                                          buffer_loop:
    54 0000004E B800000000                          mov eax, 0
    55 00000053 8A86[15000000]                      mov al, [buffer + esi]
    56                                              
    57                                              ; check if lowercase -> transform to uppercase
    58 00000059 3C7A                                cmp al, 'z'
    59 0000005B 7706                                ja not_lowercase
    60 0000005D 3C61                                cmp al, 'a'
    61 0000005F 7202                                jb not_lowercase
    62 00000061 2C20                                sub al, 32
    63                                              not_lowercase:
    64                                              
    65                                              ; check if letter
    66 00000063 3C5A                                cmp al, 'Z'
    67 00000065 771E                                ja not_letter
    68 00000067 3C41                                cmp al, 'A'
    69 00000069 721A                                jb not_letter
    70                                              
    71                                              ; check if vowel -> if not increase consonant count
    72 0000006B 3C41                                cmp al, 'A'
    73 0000006D 7416                                je not_consonant
    74 0000006F 3C45                                cmp al, 'E'
    75 00000071 7412                                je not_consonant
    76 00000073 3C49                                cmp al, 'I'
    77 00000075 740E                                je not_consonant
    78 00000077 3C4F                                cmp al, 'O'
    79 00000079 740A                                je not_consonant
    80 0000007B 3C55                                cmp al, 'U'
    81 0000007D 7406                                je not_consonant
    82 0000007F FE05[7A000000]                      inc byte [number_of_consonants]
    83                                              
    84                                              not_consonant:
    85                                              not_letter:
    86 00000085 46                                  inc esi
    87 00000086 E2C6                                loop buffer_loop
    88                                      
    89                                          ; clear buffer
    90                                          clear_buffer:
    91 00000088 BF00000000                          mov edi, 0
    92 0000008D B964000000                          mov ecx, buffer_len
    93                                              clear:
    94 00000092 C687[15000000]00                        mov byte [buffer + edi], 0
    95 00000099 47                                      inc edi
    96 0000009A E2F6                                    loop clear
    97 0000009C EB83                            jmp read_loop
    98                                      
    99                                      
   100                                      ; close file
   101                                      close_file:
   102 0000009E FF35[0D000000]                  push dword [file_descriptor]
   103 000000A4 FF15[00000000]                  call [fclose]
   104 000000AA 83C404                          add esp, 4
   105                                          
   106                                      ; print result
   107 000000AD FF35[7A000000]              push dword [number_of_consonants]
   108 000000B3 68[7E000000]                push dword format
   109 000000B8 FF15[00000000]              call [printf]
   110 000000BE 83C408                      add esp, 8
   111                                  
   112                                  final:
   113 000000C1 6A00                        push dword 0
   114 000000C3 FF15[00000000]              call [exit]
