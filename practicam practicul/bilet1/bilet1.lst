     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf, scanf, fprintf, fopen, fclose
     6                                  import exit msvcrt.dll
     7                                  import printf msvcrt.dll
     8                                  import scanf msvcrt.dll
     9                                  import fprintf msvcrt.dll
    10                                  import fclose msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  
    13                                  
    14                                  segment data use32 class=data
    15 00000000 62696C6574315F6F75-         file_name db 'bilet1_output.txt', 0
    15 00000009 747075742E74787400 
    16 00000012 FFFFFFFF                    file_descriptor dd -1
    17 00000016 7700                        access_mode_write db 'w', 0
    18                                      
    19 00000018 00000000                    n dd 0
    20 0000001C 00<rept>                    string times 100 db 0
    21 00000080 256400                      format_read_dec db '%d', 0
    22 00000083 257300                      format_read_str db '%s', 0
    23 00000086 25730A00                    format_print_str db '%s', 10, 0
    24                                  
    25                                  
    26                                  segment code use32 class=code
    27                                  start:
    28                                      ; open file
    29 00000000 68[16000000]                push dword access_mode_write
    30 00000005 68[00000000]                push dword file_name
    31 0000000A FF15[00000000]              call [fopen]
    32 00000010 83C408                      add esp, 8
    33                                      ; check for errors
    34 00000013 83F800                      cmp eax, 0
    35 00000016 0F84E0000000                je .exit_program
    36 0000001C A3[12000000]                mov [file_descriptor], eax
    37                                  
    38                                      ; read no. of strings
    39 00000021 68[18000000]                push dword n
    40 00000026 68[80000000]                push dword format_read_dec
    41 0000002B FF15[00000000]              call [scanf]
    42 00000031 83C408                      add esp, 8
    43                                      
    44                                      .read_strings_loop:
    45                                          ; read string
    46 00000034 68[1C000000]                    push dword string
    47 00000039 68[83000000]                    push dword format_read_str
    48 0000003E FF15[00000000]                  call [scanf]
    49 00000044 83C408                          add esp, 8
    50                                          
    51                                          ; check if chr is #
    52 00000047 803D[1C000000]23                cmp [string], byte '#'
    53 0000004E 0F8499000000                    je .after_read_loop
    54                                          
    55 00000054 B800000000                      mov eax, 0 ; eax = number of vowels
    56 00000059 BE00000000                      mov esi, 0
    57                                          .vowel_loop:
    58                                              ; check if we reached the end of the word
    59 0000005E 80BE[1C000000]00                    cmp [string + esi], byte 0
    60 00000065 7460                                je .after_vowel_loop
    61                                              
    62                                              ; check if letter is vowel
    63 00000067 80BE[1C000000]61                    cmp byte [string + esi], 'a'
    64 0000006E 7453                                je .is_vowel
    65 00000070 80BE[1C000000]65                    cmp byte [string + esi], 'e'
    66 00000077 744A                                je .is_vowel
    67 00000079 80BE[1C000000]69                    cmp byte [string + esi], 'i'
    68 00000080 7441                                je .is_vowel
    69 00000082 80BE[1C000000]6F                    cmp byte [string + esi], 'o'
    70 00000089 7438                                je .is_vowel
    71 0000008B 80BE[1C000000]75                    cmp byte [string + esi], 'u'
    72 00000092 742F                                je .is_vowel
    73 00000094 80BE[1C000000]41                    cmp byte [string + esi], 'A'
    74 0000009B 7426                                je .is_vowel
    75 0000009D 80BE[1C000000]45                    cmp byte [string + esi], 'E'
    76 000000A4 741D                                je .is_vowel
    77 000000A6 80BE[1C000000]49                    cmp byte [string + esi], 'I'
    78 000000AD 7414                                je .is_vowel
    79 000000AF 80BE[1C000000]4F                    cmp byte [string + esi], 'O'
    80 000000B6 740B                                je .is_vowel
    81 000000B8 80BE[1C000000]55                    cmp byte [string + esi], 'U'
    82 000000BF 7402                                je .is_vowel
    83 000000C1 EB01                                jmp .after_check
    84                                              
    85                                              .is_vowel:
    86 000000C3 40                                  inc eax
    87                                              
    88                                              .after_check:
    89 000000C4 46                                  inc esi
    90 000000C5 EB97                                jmp .vowel_loop
    91                                          
    92                                          .after_vowel_loop:
    93                                          ; check if no. of vowels is above n
    94 000000C7 3B05[18000000]                  cmp eax, [n]
    95 000000CD 7219                            jb .after_check_number
    96                                          
    97                                          ; printf word in file
    98 000000CF 68[1C000000]                    push dword string
    99 000000D4 68[86000000]                    push dword format_print_str
   100 000000D9 FF35[12000000]                  push dword [file_descriptor]
   101 000000DF FF15[00000000]                  call [fprintf]
   102 000000E5 83C40C                          add esp, 12
   103                                          
   104                                          .after_check_number
   104          ******************       warning: label alone on a line without a colon might be in error [-w+orphan-labels]
   105                                          
   106                                          ; repeat read_loop
   107 000000E8 E947FFFFFF                      jmp .read_strings_loop
   108                                          
   109                                      .after_read_loop:
   110                                      
   111                                      ; close file
   112 000000ED FF35[12000000]              push dword [file_descriptor]
   113 000000F3 FF15[00000000]              call [fclose]
   114 000000F9 83C404                      add esp, 4
   115                                  
   116                                  .exit_program:
   117 000000FC 6A00                        push dword 0
   118 000000FE FF15[00000000]              call [exit]
